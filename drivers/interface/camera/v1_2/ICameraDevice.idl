/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file icamera_device.h
 *
 * @brief Declares APIs for camera device operations.
 *
 * @since 4.1
 * @version 1.2
 */

package ohos.hdi.camera.v1_2;

import ohos.hdi.camera.v1_1.ICameraDevice;
import ohos.hdi.camera.v1_2.IStreamOperatorCallback;
import ohos.hdi.camera.v1_2.IStreamOperator;

interface ICameraDevice extends ohos.hdi.camera.v1_1.ICameraDevice {
    /**
     * @brief Obtains the stream operation handle.
     *
     * @param callback Indicates a stream callback. For details, see {@link IStreamOperatorCallback}.
     * {@link OnCaptureStarted} and {@link OnCaptureEnded} are used to report the start and end of capture,
     * and {@link OnCaptureError} is used to report a capture error.
     *
     * @param streamOperator Indicates the stream operation handle.
     *
     * @return Returns <b>NO_ERROR</b> if the operation is successful; returns an error code defined
     * in {@link CamRetCode} otherwise.
     *
     * @since 4.1
     * @version 1.2
     */
    GetStreamOperator_V1_2([in] IStreamOperatorCallback callbackObj, [out] IStreamOperator streamOperator);

    /**
     * @brief Obtains the dynaimic ability value.
     *
     * @param metaIn Indicates ability input.
     * @param metaOut Indicates ability output,
     * and {@link OnCaptureError} is used to report a capture error.
     *
     * @return Returns <b>NO_ERROR</b> if the operation is successful; returns an error code defined
     * in {@link CamRetCode} otherwise.
     *
     * @since 4.1
     * @version 1.2
     */
    GetStatus([in] unsigned char[] metaIn, [out] unsigned char[] metaOut);

    /**
     * @brief Reset camera device setting.
     *
     * @return Returns <b>NO_ERROR</b> if the operation is successful; returns an error code defined
     * in {@link CamRetCode} otherwise.
     *
     * @since 4.1
     * @version 1.2
     */
    Reset();
}