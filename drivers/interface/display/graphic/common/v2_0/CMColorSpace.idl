/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @addtogroup HdiDisplay
 * 
 * @since 5.0
 * @version 2.0
 */

package ohos.hdi.display.graphic.common.v2_0;

/**
 * @brief defines color gamut.
 *
 */
enum CM_ColorPrimaries {
    COLORPRIMARIES_BT709 = 1,      // map to H.273 Chapter 8.1 table 2; index = 1
    COLORPRIMARIES_SRGB = 1,       // equal to COLORPRIMARIES_BT709
    COLORPRIMARIES_BT601_P,        // map to H.273 Chapter 8.1 table 2; index = 5
    COLORPRIMARIES_BT601_N,        // map to H.273 Chapter 8.1 table 2; index = 6
    COLORPRIMARIES_BT2020 = 4,     // map to H.273 Chapter 8.1 table 2; index = 9
    COLORPRIMARIES_BT2100 = 4,     // equal to COLORPRIMARIES_BT2020
    COLORPRIMARIES_P3_DCI,         // map to H.273 Chapter 8.1 table 2; index = 11
    COLORPRIMARIES_P3_D65,         // map to H.273 Chapter 8.1 table 2; index = 12
    COLORPRIMARIES_MONO,           // for example, gain map data
    COLORPRIMARIES_ADOBERGB = 23
};

/**
 * @brief control the linear/non-linear color convert, nick named gamma function.
 *
 */
enum CM_TransFunc {
    TRANSFUNC_BT709 = 1,           // map to H.273 Chapter 8.2 table 3; index = 1/6/14/15
    TRANSFUNC_SRGB = 2,            // map to H.273 Chapter 8.2 table 3; index = 13
    TRANSFUNC_LINEAR = 3,          // map to H.273 Chapter 8.2 table 3; index = 8
    TRANSFUNC_PQ,                  // map to H.273 Chapter 8.2 table 3; index = 16
    TRANSFUNC_HLG,                 // map to H.273 Chapter 8.2 table 3; index = 18
    TRANSFUNC_ADOBERGB,
    TRANSFUNC_GAMMA2_2,
    TRANSFUNC_GAMMA2_4,
};

enum CM_Range {
    RANGE_UNKNOW = 0,
    RANGE_FULL,            // full/wide Range
    RANGE_LIMITED,         // limited/narrow Range
    RANGE_EXTEND,
};

/**
 * @brief control yuv<-->rgb conversion
 *
 */
enum CM_Matrix {
    MATRIX_ADOBERGB = 0,
    MATRIX_BT709 = 1,      // map to H.273 Chapter 8.3 table 4; index = 1
    MATRIX_BT601_P,        // map to H.273 Chapter 8.3 table 4; index = 5
    MATRIX_BT601_N = 3,    // map to H.273 Chapter 8.3 table 4; index = 6
    MATRIX_P3 = 3,         // equal to MATRIX_BT601_N
    MATRIX_BT2020 = 4,     // map to H.273 Chapter 8.3 table 4; index = 9
    MATRIX_BT2100 = 4,     // equal to MATRIX_BT2020
    MATRIX_BT2100_ICTCP    // map to H.273 Chapter 8.3 table 4; index = 14
};

struct CM_ColorSpaceInfo {
    enum CM_ColorPrimaries primaries;
    enum CM_TransFunc      transfunc;
    enum CM_Matrix         matrix;
    enum CM_Range          range;
};

enum CM_ColorSpaceType {
    CM_COLORSPACE_NONE,

    CM_BT601_EBU_FULL      = 2 | (1 << 8) | (2 << 16) | (1 << 21),  // COLORPRIMARIES_BT601_P | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_P << 16) | (RANGE_FULL << 21)
    CM_BT601_SMPTE_C_FULL  = 3 | (1 << 8) | (3 << 16) | (1 << 21),  // COLORPRIMARIES_BT601_N | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_N << 16) | (RANGE_FULL << 21)
    CM_BT709_FULL          = 1 | (1 << 8) | (1 << 16) | (1 << 21),  // COLORPRIMARIES_BT709   | (TRANSFUNC_BT709 << 8) | (MATRIX_BT709   << 16) | (RANGE_FULL << 21)
    CM_BT2020_HLG_FULL     = 4 | (5 << 8) | (4 << 16) | (1 << 21),  // COLORPRIMARIES_BT2020  | (TRANSFUNC_HLG   << 8) | (MATRIX_BT2020  << 16) | (RANGE_FULL << 21)
    CM_BT2020_PQ_FULL      = 4 | (4 << 8) | (4 << 16) | (1 << 21),  // COLORPRIMARIES_BT2020  | (TRANSFUNC_PQ    << 8) | (MATRIX_BT2020  << 16) | (RANGE_FULL << 21)

    CM_BT601_EBU_LIMIT     = 2 | (1 << 8) | (2 << 16) | (2 << 21),  // COLORPRIMARIES_BT601_P | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_P << 16) | (RANGE_LIMITED << 21)
    CM_BT601_SMPTE_C_LIMIT = 3 | (1 << 8) | (3 << 16) | (2 << 21),  // COLORPRIMARIES_BT601_N | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_N << 16) | (RANGE_LIMITED << 21)
    CM_BT709_LIMIT         = 1 | (1 << 8) | (1 << 16) | (2 << 21),  // COLORPRIMARIES_BT709   | (TRANSFUNC_BT709 << 8) | (MATRIX_BT709   << 16) | (RANGE_LIMITED << 21)
    CM_BT2020_HLG_LIMIT    = 4 | (5 << 8) | (4 << 16) | (2 << 21),  // COLORPRIMARIES_BT2020  | (TRANSFUNC_HLG   << 8) | (MATRIX_BT2020  << 16) | (RANGE_LIMITED << 21)
    CM_BT2020_PQ_LIMIT     = 4 | (4 << 8) | (4 << 16) | (2 << 21),  // COLORPRIMARIES_BT2020  | (TRANSFUNC_PQ    << 8) | (MATRIX_BT2020  << 16) | (RANGE_LIMITED << 21)

    CM_SRGB_FULL           = 1 | (2 << 8) | (3 << 16) | (1 << 21),  // COLORPRIMARIES_SRGB     | (TRANSFUNC_SRGB     << 8) | (MATRIX_BT601_N  << 16) | (RANGE_FULL << 21)
    CM_P3_FULL             = 6 | (2 << 8) | (3 << 16) | (1 << 21),  // COLORPRIMARIES_P3_D65   | (TRANSFUNC_SRGB     << 8) | (MATRIX_P3       << 16) | (RANGE_FULL << 21)
    CM_P3_HLG_FULL         = 6 | (5 << 8) | (3 << 16) | (1 << 21),  // COLORPRIMARIES_P3_D65   | (TRANSFUNC_HLG      << 8) | (MATRIX_P3       << 16) | (RANGE_FULL << 21)
    CM_P3_PQ_FULL          = 6 | (4 << 8) | (3 << 16) | (1 << 21),  // COLORPRIMARIES_P3_D65   | (TRANSFUNC_PQ       << 8) | (MATRIX_P3       << 16) | (RANGE_FULL << 21)
    CM_ADOBERGB_FULL       = 23 | (6 << 8) | (0 << 16) | (1 << 21), // COLORPRIMARIES_ADOBERGB | (TRANSFUNC_ADOBERGB << 8) | (MATRIX_ADOBERGB << 16) | (RANGE_FULL << 21)

    CM_SRGB_LIMIT          = 1 | (2 << 8) | (3 << 16) | (2 << 21),  // COLORPRIMARIES_SRGB     | (TRANSFUNC_SRGB     << 8) | (MATRIX_BT601_N  << 16) | (RANGE_LIMITED << 21)
    CM_P3_LIMIT            = 6 | (2 << 8) | (3 << 16) | (2 << 21),  // COLORPRIMARIES_P3_D65   | (TRANSFUNC_SRGB     << 8) | (MATRIX_P3       << 16) | (RANGE_LIMITED << 21)
    CM_P3_HLG_LIMIT        = 6 | (5 << 8) | (3 << 16) | (2 << 21),  // COLORPRIMARIES_P3_D65   | (TRANSFUNC_HLG      << 8) | (MATRIX_P3       << 16) | (RANGE_LIMITED << 21)
    CM_P3_PQ_LIMIT         = 6 | (4 << 8) | (3 << 16) | (2 << 21),  // COLORPRIMARIES_P3_D65   | (TRANSFUNC_PQ       << 8) | (MATRIX_P3       << 16) | (RANGE_LIMITED << 21)
    CM_ADOBERGB_LIMIT      = 23 | (6 << 8) | (0 << 16) | (2 << 21), // COLORPRIMARIES_ADOBERGB | (TRANSFUNC_ADOBERGB << 8) | (MATRIX_ADOBERGB << 16) | (RANGE_LIMITED << 21)

    CM_LINEAR_SRGB         = 1 | (3 << 8),                          // COLORPRIMARIES_SRGB   | (TRANSFUNC_LINEAR << 8)
    CM_LINEAR_BT709        = 1 | (3 << 8),                          // equal to CM_LINEAR_SRGB
    CM_LINEAR_P3           = 6 | (3 << 8),                          // COLORPRIMARIES_P3_D65 | (TRANSFUNC_LINEAR << 8)
    CM_LINEAR_BT2020       = 4 | (3 << 8),                          // COLORPRIMARIES_BT2020 | (TRANSFUNC_LINEAR << 8)

    CM_DISPLAY_SRGB        = 1 | (2 << 8) | (3 << 16) | (1 << 21),  // equal to CM_SRGB_FULL
    CM_DISPLAY_P3_SRGB     = 6 | (2 << 8) | (3 << 16) | (1 << 21),  // equal to CM_P3_FULL
    CM_DISPLAY_P3_HLG      = 6 | (5 << 8) | (3 << 16) | (1 << 21),  // equal to CM_P3_HLG_FULL
    CM_DISPLAY_P3_PQ       = 6 | (4 << 8) | (3 << 16) | (1 << 21),  // equal to CM_P3_PQ_FULL
    CM_DISPLAY_BT2020_SRGB = 4 | (2 << 8) | (4 << 16) | (1 << 21),  // COLORPRIMARIES_BT2020   | (TRANSFUNC_SRGB << 8)     | (MATRIX_BT2020 << 16)   | (RANGE_FULL << 21)
    CM_DISPLAY_BT2020_HLG  = 4 | (5 << 8) | (4 << 16) | (1 << 21),  // equal to CM_BT2020_HLG_FULL
    CM_DISPLAY_BT2020_PQ   = 4 | (4 << 8) | (4 << 16) | (1 << 21)   // equal to CM_BT2020_PQ_FULL
};

enum CM_ColorSpaceMask {
    CM_PRIMARIES_MASK = 255,      // 0-7 8bit
    CM_TRANSFUNC_MASK = 255 << 8, // 8-15 8bit
    CM_MATRIX_MASK    = 31 << 16, // 16-20 5bit
    CM_RANGE_MASK     = 7 << 21   // 21-23 3bit
};

enum CM_HDR_Metadata_Type {
    CM_METADATA_NONE,            // SDR

    /* video HDR metadata type */
    CM_VIDEO_HLG,                // HLG
    CM_VIDEO_HDR10,              // HDR10
    CM_VIDEO_HDR_VIVID,          // video HDR vivid

    /* image HDR vivid metadata type */
    CM_IMAGE_HDR_VIVID_SDR = 20, // image HDR vivid SDR
    CM_IMAGE_HDR_VIVID_GAINMAP,  // image HDR vivid gainmap
    CM_IMAGE_HDR_VIVID_HDR,      // image HDR vivid HDR

    /* image HDR iso metadata type */
    CM_IMAGE_HDR_ISO_SDR = 40,   // image HDR iso SDR
    CM_IMAGE_HDR_ISO_GAINMAP,    // image HDR iso gainmap
    CM_IMAGE_HDR_ISO_HDR,        // image HDR iso HDR
};
