/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @addtogroup HdiAudio
 * @{
 *
 * @brief Provides unified APIs for audio services to access audio drivers.
 *
 * An audio service can obtain an audio driver object or agent and then call APIs provided by this object or agent to
 * access different types of audio devices based on the audio IDs, thereby obtaining audio information,
 * subscribing to or unsubscribing from audio data, enabling or disabling an audio,
 * setting the audio data reporting mode, and setting audio options such as the accuracy and measurement range.
 *
 * @since 4.1
 * @version 2.0
 */

package ohos.hdi.audio.v2_0;

import ohos.hdi.audio.v2_0.AudioTypes;
import ohos.hdi.audio.v2_0.IAudioAdapter;

/**
 * @brief Manages audio adapters through a specific adapter driver program loaded based on the given audio
 * adapter descriptor.
 *
 * @see IAudioAdapter
 * @since 4.1
 * @version 2.0
 */
interface IAudioManager {
    /**
     * @brief Obtains the list of all adapters supported by an audio driver.
     *
     * @param manager Indicates the pointer to the audio adapter manager to operate.
     * @param descs Indicates the double pointer to the audio adapter list.
     * @param size Indicates the pointer to the length of the list.
     * @return Returns <b>0</b> if the list is obtained successfully; returns a negative value otherwise.
     * @see LoadAdapter
     */
    GetAllAdapters([out] struct AudioAdapterDescriptor[] descs);

    /**
     * @brief Loads the driver for an audio adapter.
     *
     * For example, to load a USB driver, you may need to load a dynamic-link library (*.so) in specific implementation.
     *
     * @param manager Indicates the pointer to the audio adapter manager to operate.
     * @param desc Indicates the pointer to the descriptor of the audio adapter.
     * @param adapter Indicates the double pointer to the audio adapter.
     * @return Returns <b>0</b> if the driver is loaded successfully; returns a negative value otherwise.
     * @see GetAllAdapters
     * @see UnloadAdapter
     */
    LoadAdapter([in] struct AudioAdapterDescriptor desc, [out] IAudioAdapter adapter);

    /**
     * @brief Unloads the driver of an audio adapter.
     *
     * @param manager Indicates the pointer to the audio adapter manager to operate.
     * @param adapter Indicates the pointer to the audio adapter whose driver will be unloaded.
     * @see LoadAdapter
     */
    UnloadAdapter([in] String adapterName);

    /**
     * @brief Release the IAudioManager Object.
     *
     * @param object Indicates the pointer to the audio adapter manager to operate.
     * @return Returns <b>true</b> if the Object is released; returns <b>false</b> otherwise.
     */
    ReleaseAudioManagerObject();
}
