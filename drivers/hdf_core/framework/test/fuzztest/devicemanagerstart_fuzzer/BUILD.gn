# Copyright (c) 2024 Huawei Device Co., Ltd.
#
# HDF is dual licensed: you can use it either under the terms of
# the GPL, or the BSD license, at your option.
# See the LICENSE file in the root of this repository for complete details.

import("//build/config/features.gni")
import("//build/ohos.gni")
import("//build/test.gni")

module_output_path = "hdf_core/hdf_core"

hdf_framework_path = "../../../"
hdf_interfaces_path = "../../../../interfaces"
hdf_manager_src_path = "../../../../adapter/uhdf2/manager/src"
hdf_uhdf_path = "../../../../adapter/uhdf2"

ohos_fuzztest("DeviceManagerStartFuzzTest") {
  module_out_path = module_output_path
  fuzz_config_file =
      "$hdf_framework_path/test/fuzztest/devicemanagerstart_fuzzer"

  defines = [ "__USER__" ]
  include_dirs = [
    "$hdf_framework_path/core/manager/include",
    "$hdf_framework_path/core/common/include/manager/",
    "$hdf_framework_path/core/host/include",
    "$hdf_framework_path/core/shared/include",
    "$hdf_framework_path/utils/include",
    "$hdf_uhdf_path/include/host",
    "$hdf_uhdf_path/shared/include",
    "$hdf_uhdf_path/manager/include",
    "$hdf_uhdf_path/host/include",
    "$hdf_uhdf_path/security/include",
    "$hdf_uhdf_path/utils/include",
    "$hdf_interfaces_path/inner_api/core",
    "$hdf_interfaces_path/inner_api/host/shared",
    "$hdf_interfaces_path/inner_api/host/uhdf",
  ]

  sources = [
    "$hdf_framework_path/core/common/src/hdf_attribute.c",
    "$hdf_framework_path/core/manager/src/devhost_service_clnt.c",
    "$hdf_framework_path/core/manager/src/device_token_clnt.c",
    "$hdf_framework_path/core/manager/src/devmgr_service.c",
    "$hdf_framework_path/core/manager/src/devsvc_manager.c",
    "$hdf_framework_path/core/manager/src/hdf_driver_installer.c",
    "$hdf_framework_path/core/manager/src/hdf_host_info.c",
    "$hdf_framework_path/core/shared/src/hdf_device_info.c",
    "$hdf_framework_path/core/shared/src/hdf_object_manager.c",
    "$hdf_framework_path/core/shared/src/hdf_service_record.c",
    "$hdf_manager_src_path/devhost_service_proxy.c",
    "$hdf_manager_src_path/device_token_proxy.c",
    "$hdf_manager_src_path/devmgr_dump.c",
    "$hdf_manager_src_path/devmgr_object_config.c",
    "$hdf_manager_src_path/devmgr_query_device.c",
    "$hdf_manager_src_path/devmgr_service_full.c",
    "$hdf_manager_src_path/devmgr_service_stub.c",
    "$hdf_manager_src_path/devmgr_uevent.c",
    "$hdf_manager_src_path/devsvc_manager_stub.c",
    "$hdf_manager_src_path/driver_installer_full.c",
    "$hdf_manager_src_path/servstat_listener_holder.c",
    "$hdf_uhdf_path/shared/src/dev_attribute_serialize.c",
    "$hdf_uhdf_path/shared/src/hcb_config_entry.c",
    "devicemanagerstart_fuzzer.cpp",
  ]
  deps = [
    "../../../../adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "../../../../adapter/uhdf2/utils:libhdf_utils",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
  ]

  if (build_selinux) {
    external_deps += [ "selinux_adapter:libservice_checker" ]
    cflags = [ "-DWITH_SELINUX" ]
  }

  cflags_cc = [ "-gdwarf-2" ]
}

group("fuzztest") {
  testonly = true
  deps = [ ":DeviceManagerStartFuzzTest" ]
}
