# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../power.gni")

module_output_path = "drivers_peripheral_power/power"
power_hdi_service_path = "../../interfaces/hdi_service"

ohos_unittest("hdi_unittest_power") {
  module_out_path = module_output_path

  include_dirs = [
    "../../interfaces/hdi_service/include",
    "../../utils/include",
  ]

  sources = [ "src/hdf_power_hdi_test.cpp" ]

  cflags = [
    "-Wall",
    "-Wextra",
    "-Werror",
    "-fsigned-char",
    "-fno-common",
    "-fno-strict-aliasing",
  ]

  deps = [ "../../../../interface/power/v1_2:libpower_stub_1.2" ]

  external_deps = [
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  if (has_power_c_utils_part) {
    external_deps += [ "c_utils:utils" ]
  }

  if (drivers_peripheral_power_wakeup_cause_path) {
    defines = [ "DRIVER_PERIPHERAL_POWER_WAKEUP_CAUSE_PATH" ]
  }
}

ohos_unittest("hdi_unittest_power_runninglock") {
  module_out_path = module_output_path

  include_dirs = [
    "${power_hdi_service_path}/src",
    "mock",
    "../../utils/include",
  ]

  sources = [
    "${power_hdi_service_path}/src/running_lock_counter.cpp",
    "${power_hdi_service_path}/src/running_lock_impl.cpp",
    "${power_hdi_service_path}/src/running_lock_timer_handler.cpp",
    "mock/mock_system_operation.cpp",
    "mock/mock_wakelock_name.cpp",
    "src/hdf_power_runninglock_test.cpp",
  ]

  cflags = [
    "-Wall",
    "-Wextra",
    "-Werror",
    "-fsigned-char",
    "-fno-common",
    "-fno-strict-aliasing",
  ]

  external_deps = [
    "drivers_interface_power:power_idl_headers",
    "hdf_core:libhdf_utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  if (has_power_c_utils_part) {
    external_deps += [ "c_utils:utils" ]
  }
  if (has_power_hisysevent_part) {
    external_deps += [ "hisysevent:libhisysevent" ]
  }
}
